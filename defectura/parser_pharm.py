import time
import csv
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.common.exceptions import NoSuchElementException
import sys
import tempfile
from selenium import webdriver
from selenium.webdriver.chrome.service import Service
# from webdriver_manager.chrome import ChromeDriverManager

def create_driver() -> webdriver.Chrome:
    options = Options()
    # options.add_argument("--headless")  # –≤–∫–ª—é—á–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    user_data_dir = tempfile.mkdtemp()
    options.add_argument(f"--user-data-dir={user_data_dir}")
    driver =  webdriver.Chrome(options=options)
    # driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    # –≤—Ä–µ–º–µ–Ω–Ω–∞—è —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è

    return driver


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ 100 –∞–ø—Ç–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
def set_items_per_page(driver: webdriver.Chrome) -> None:
    try:
        try:
            bottom_notice = driver.find_element(By.CLASS_NAME, "bottom-notice-close")
            driver.execute_script("arguments[0].click();", bottom_notice)
            print(" –ë–∞–Ω–Ω–µ—Ä –∑–∞–∫—Ä—ã—Ç")
            time.sleep(1)
        except NoSuchElementException:
            pass

        select_buttons = driver.find_elements(By.ID, "paging")
        if not select_buttons:
            print(" –≠–ª–µ–º–µ–Ω—Ç #paging –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.")
            return

        select_button = select_buttons[0]
        driver.execute_script("arguments[0].scrollIntoView(true);", select_button)
        driver.execute_script("arguments[0].click();", select_button)

        option_100 = driver.find_element(By.ID, "tw3")
        driver.execute_script("arguments[0].click();", option_100)
        # time.sleep(1)
    except Exception as e:
        print(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–ø—Ç–µ–∫:", e)


# –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ø—Ç–µ–∫–∞—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
from selenium.common.exceptions import StaleElementReferenceException


def get_pharmacy_info(driver: webdriver.Chrome) -> list[list[str]]:
    pharmacies = []
    rows = driver.find_elements(By.CSS_SELECTOR, "tr.tr-border")

    for index in range(len(rows)):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å stale reference
            row = driver.find_elements(By.CSS_SELECTOR, "tr.tr-border")[index]

            name = row.find_element(By.CSS_SELECTOR, ".pharm-name a").text.strip()
            address = row.find_element(By.CSS_SELECTOR, ".address .text-wrap span").text.strip()
            phone = row.find_element(By.CSS_SELECTOR, ".phone .text-wrap a").text.strip()
            price = row.find_element(By.CSS_SELECTOR, ".price .price-value").text.strip()
            pharmacies.append([name, address, phone, price])
        except (NoSuchElementException, StaleElementReferenceException):
            continue

    return pharmacies


# –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

def click_next(driver: webdriver.Chrome) -> bool:
    try:
        WebDriverWait(driver, 5).until(
            EC.presence_of_element_located((By.CSS_SELECTOR, ".table-pagination-next"))
        )

        next_btns = driver.find_elements(By.CSS_SELECTOR, ".table-pagination-next a")
        if not next_btns:
            print(" –ö–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä—ë–¥' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return False

        next_btn = next_btns[0]
        if not next_btn.is_displayed():
            print(" –ö–Ω–æ–ø–∫–∞ '–í–ø–µ—Ä—ë–¥' –Ω–µ –≤–∏–¥–Ω–∞. –°—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
            return False

        driver.execute_script("arguments[0].scrollIntoView(true);", next_btn)
        driver.execute_script("window.scrollBy(0, 100);")
        driver.execute_script("arguments[0].click();", next_btn)
        return True
    except Exception as e:
        print(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É:", e)
        return False



# –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫
def read_pharmacies(file_name: str) -> set[tuple[str, str]]:
    with open(file_name, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)
        return {(row[0].strip(), row[1].strip()) for row in reader if row}


# –ß—Ç–µ–Ω–∏–µ –∞–ø—Ç–µ–∫, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç
# –ß—Ç–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∞–π–ª–∞ (–∞–ø—Ç–µ–∫–∏ —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º)
def read_pharmacies_with_drug(file_name):
    with open(file_name, newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)  # ‚¨ÖÔ∏è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        pharmacies = {(row[0].strip(), row[1].strip()) for row in reader if row}
    return pharmacies


# –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
# –û—Å–Ω–æ–≤–Ω–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º
def compare_pharmacies():
    # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫
    all_pharmacies = read_pharmacies('all_pharmacies.csv')

    # –ß—Ç–µ–Ω–∏–µ –∞–ø—Ç–µ–∫ —Å –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–º
    pharmacies_with_drug = read_pharmacies_with_drug('pharmacies_with_drug.csv')

    # üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f" –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ all_pharmacies.csv (–≤–∫–ª—é—á–∞—è –∑–∞–≥–æ–ª–æ–≤–æ–∫): {sum(1 for _ in open('all_pharmacies.csv', encoding='utf-8'))}")
    print(f" –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∞–ø—Ç–µ–∫ (–ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞–¥—Ä–µ—Å—É): {len(all_pharmacies)}")
    print(f" –ê–ø—Ç–µ–∫, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç: {len(pharmacies_with_drug)}")

    # –ù–∞—Ö–æ–¥–∏–º –∞–ø—Ç–µ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
    pharmacies_without_drug = all_pharmacies - pharmacies_with_drug

    print(f" –í—Å–µ–≥–æ –∞–ø—Ç–µ–∫ –±–µ–∑ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞: {len(pharmacies_without_drug)}")

    # –ß—Ç–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö –∞–ø—Ç–µ–∫–∞—Ö (–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ñ–∞–π–ª–∞)
    pharmacies_info = {}
    with open('all_pharmacies.csv', newline='', encoding='utf-8') as f:
        reader = csv.reader(f)
        next(reader, None)  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
        for row in reader:
            name = row[0].strip()
            address = row[1].strip()
            work_time = row[2].strip()
            phone = row[3].strip()
            pharmacies_info[(name, address)] = {
                "work_time": work_time,
                "phone": phone,
            }

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –Ω–æ–≤—ã–π CSV
    output_data = []
    with open('pharmacies_without_drug.csv', "w", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏", "–ê–¥—Ä–µ—Å", "–¢–µ–ª–µ—Ñ–æ–Ω", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã", "–¶–µ–Ω–∞"])

        for pharmacy in pharmacies_without_drug:
            if pharmacy in pharmacies_info:
                info = pharmacies_info[pharmacy]
                row = [pharmacy[0], pharmacy[1], info["phone"], info["work_time"], ""]
                writer.writerow(row)
                output_data.append(row)

    print(" –ê–ø—Ç–µ–∫–∏, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ pharmacies_without_drug.csv")

    #  –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Excel
    save_to_excel("pharmacies_without_drug.xlsx", output_data, ["–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏", "–ê–¥—Ä–µ—Å", "–¢–µ–ª–µ—Ñ–æ–Ω", "–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"])

    #  –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î



from openpyxl import Workbook
from openpyxl.styles import Font, Alignment
from openpyxl.utils import get_column_letter

def save_to_excel(filename, data, headers):
    wb = Workbook()
    ws = wb.active
    ws.title = "–ê–ø—Ç–µ–∫–∏"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num, value=header)
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal="center")
        col_letter = get_column_letter(col_num)
        ws.column_dimensions[col_letter].width = max(len(header) + 2, 15)

    # –î–∞–Ω–Ω—ã–µ
    for row_num, row_data in enumerate(data, 2):
        for col_num, value in enumerate(row_data, 1):
            ws.cell(row=row_num, column=col_num, value=value)

    wb.save(filename)
    print(f"–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def parser(item_id):
    driver = create_driver()
    BASE_URL = f"https://tabletka.by/result/?ls={item_id}"

    # print(" –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É...")
    driver.get(BASE_URL)
    time.sleep(2)
    print('sleep 2 seconds')

    # print("Ô∏è –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ –ø–æ 100...")
    set_items_per_page(driver)

    result = []
    page = 1

    while True:
        print(f" –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page}...")
        result.extend(get_pharmacy_info(driver))
        if not click_next(driver):
            break
        time.sleep(1)
        page += 1

    print(f" –°–æ–±—Ä–∞–Ω–æ –∞–ø—Ç–µ–∫: {len(result)}")

    with open("pharmacies_with_drug.csv", "w", newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(["–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ø—Ç–µ–∫–∏", "–ê–¥—Ä–µ—Å", "–¢–µ–ª–µ—Ñ–æ–Ω", "–¶–µ–Ω–∞"])
        writer.writerows(result)

    compare_pharmacies()
    print(" –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ pharmacies_with_drug.csv")
    driver.quit()




# if __name__ == "__main__":
#     # –ü–æ–ª—É—á–∞–µ–º item_id –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
#     if len(sys.argv) != 2:
#         print(" –û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å item_id –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.")
#         sys.exit(1)
#
#     try:
#         item_id = int(sys.argv[1])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int (–µ—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ)
#     except ValueError:
#         print(" –û—à–∏–±–∫–∞: item_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
#         sys.exit(1)
#
#     # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–µ—Ä —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º item_id
#     parser(item_id)



